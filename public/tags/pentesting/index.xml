<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pentesting on Hack Me Daddy</title>
    <link>http://localhost:1313/tags/pentesting/</link>
    <description>Recent content in Pentesting on Hack Me Daddy</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/pentesting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Emulate Different Architectures in Docker</title>
      <link>http://localhost:1313/cheatsheets/howtoemulatedifferentarchitecturesindocker/</link>
      <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/cheatsheets/howtoemulatedifferentarchitecturesindocker/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;When conducting security assessments or penetration tests involving containers, you&amp;rsquo;ll often encounter images built for different CPU architectures. For example, you might need to analyze an ARM64 container on your x86_64 laptop, or test an old x86 container on modern ARM-based hardware. This guide covers various methods to handle cross-architecture container analysis.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-architecture-emulation-in-docker&#34;&gt;Understanding Architecture Emulation in Docker&lt;/h2&gt;&#xA;&lt;p&gt;Docker uses QEMU under the hood to enable cross-architecture support. QEMU is a generic machine emulator and virtualizer that allows running binaries built for one CPU architecture on a different one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transferring Docker Images via SCP</title>
      <link>http://localhost:1313/cheatsheets/transferringdockerimagesviascp/</link>
      <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/cheatsheets/transferringdockerimagesviascp/</guid>
      <description>&lt;h2 id=&#34;transferring-docker-images-for-security-assessment&#34;&gt;Transferring Docker Images for Security Assessment&lt;/h2&gt;&#xA;&lt;p&gt;When working with Docker containers in security testing scenarios, having local access to container images provides significant advantages. Recently I had to test some containers but did not have direct access to the private registry, however I did have access to a host that had the images on them. In order to make testing easier (and with permission) I transferred the images locally so I could test. This guide shows how to securely transfer Docker images between hosts for local analysis and pentesting as well as shows some basic testing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Attacking LDAP: Deep Dive &amp; Cheatsheet</title>
      <link>http://localhost:1313/cheatsheets/ldap-cheatsheet/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/cheatsheets/ldap-cheatsheet/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;+Protocol for accessing and managing directory information, widely used in enterprise environments.+&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LDAP is an open-source and cross-platform protocol used for authentication against various directory services (such as AD).&lt;/li&gt;&#xA;&lt;li&gt;AD stores user account information and security information such as passwords and facilitates sharing this information with other devices on the network. &lt;strong&gt;LDAP is the language that applications use to communicate with other servers that also provide directory services&lt;/strong&gt;. In other words, LDAP is a way that systems in the network environment can &amp;ldquo;speak&amp;rdquo; to AD.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ldap-overview&#34;&gt;LDAP Overview:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ports: &lt;code&gt;389&lt;/code&gt;, &lt;code&gt;636&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Attacking RPC: Deep Dive &amp; Cheat Sheet</title>
      <link>http://localhost:1313/cheatsheets/rpc-cheatsheet/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/cheatsheets/rpc-cheatsheet/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;RPC (Remote Procedure Call) is a protocol that allows a program to execute a procedure or function on another computer as if it were a local call. This cheat sheet provides a comprehensive overview of RPC, including its functionality, security implications, and relevance to penetration testing.&lt;/p&gt;&#xA;&lt;h2 id=&#34;port-number--s&#34;&gt;Port Number(s):&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;RPC (Remote Procedure Call) does not operate on a specific port itself&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Instead, it relies on underlying protocols to establish connections and transfer data.&lt;/li&gt;&#xA;&lt;li&gt;RPC uses different ports to facilitate communication between systems and services. Here&amp;rsquo;s a summary of the key ports involved:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Port&lt;/strong&gt; &lt;code&gt;135&lt;/code&gt; (&lt;code&gt;TCP/UDP&lt;/code&gt;):&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
