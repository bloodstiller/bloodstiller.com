<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Hack Me Daddy</title>
    <link>http://localhost:1313/articles/</link>
    <description>Recent content in Articles on Hack Me Daddy</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure AD Connect Exploitation &amp; Privilege Escalation</title>
      <link>http://localhost:1313/articles/azureadconnect/</link>
      <pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/azureadconnect/</guid>
      <description>&lt;h2 id=&#34;used-for-connecting-on-premises-ad-instances-with-azure-cloud-instances&#34;&gt;Used-For: Connecting on-premises AD instances with Azure cloud instances&lt;/h2&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview:&lt;/h2&gt;&#xA;&lt;p&gt;Azure AD Connect is a Microsoft tool designed to bridge on-premises Active Directory (AD) with Azure AD in the cloud. It offers several synchronization methods:&lt;/p&gt;&#xA;&lt;h3 id=&#34;pass-through-authentication--pta&#34;&gt;Pass-through Authentication (PTA):&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Validates users&amp;rsquo; passwords directly against on-premises AD&lt;/li&gt;&#xA;&lt;li&gt;Enables enforcement of on-premises security and password policies&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;federated-authentication--adfs&#34;&gt;Federated Authentication (ADFS):&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Uses a separate federated authentication system like AD FS&lt;/li&gt;&#xA;&lt;li&gt;Provides advanced capabilities like multi-factor authentication and third-party MFA integration&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;password-hash-synchronization--phs&#34;&gt;Password Hash Synchronization (PHS):&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Synchronizes a hash of the hash of users&amp;rsquo; passwords from on-premises AD to Azure AD&lt;/li&gt;&#xA;&lt;li&gt;Allows for cloud-based authentication without on-premises infrastructure dependency&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;password-hash-synchronization--phs--method&#34;&gt;Password Hash Synchronization (PHS) Method:&lt;/h3&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a simplified diagram illustrating the Password Hash Synchronization (PHS) method:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding the Shadow Credentials Attack Vector</title>
      <link>http://localhost:1313/articles/shadowcredentialsattack/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/shadowcredentialsattack/</guid>
      <description>&lt;h2 id=&#34;understanding-the-shadow-credentials-attack-vector&#34;&gt;Understanding the Shadow Credentials Attack Vector:&lt;/h2&gt;&#xA;&lt;p&gt;The Shadow Credentials attack is an advanced technique that exploits Active Directory&amp;rsquo;s certificate-based authentication mechanism to compromise user accounts without changing their passwords. This attack leverages the &lt;code&gt;msDS-KeyCredentialLink&lt;/code&gt; attribute to add a malicious certificate, allowing an attacker to impersonate the target user stealthily.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;To put it simply&lt;/strong&gt;: If we have the &lt;code&gt;WriteProperty&lt;/code&gt; privilege (specifically for the &lt;code&gt;msDS-KeyCredentialLink&lt;/code&gt; attribute) over a user or computer object, we can set Shadow Credentials for that object and authenticate as them. You read that right, we can add a certificate-based credential to a user or computer and then authenticate as them. We can also request a &lt;code&gt;Kerberos&lt;/code&gt; ticket and use it for pass-the-ticket attacks if needed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding .NET Deserialization Exploits: A Deep Dive</title>
      <link>http://localhost:1313/articles/deserializationattacksexplained/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/deserializationattacksexplained/</guid>
      <description>&lt;h2 id=&#34;understanding-dot-net-deserialization-exploits-a-deep-dive&#34;&gt;Understanding &lt;code&gt;.NET&lt;/code&gt; Deserialization Exploits: A Deep Dive:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;.NET&lt;/code&gt; deserialization exploits have become a common technique; providing a pathway to remote code execution (RCE) on vulnerable systems. Tools like &lt;a href=&#34;https://github.com/pwntester/ysoserial.net&#34;&gt;ysoserial.net&lt;/a&gt; can generate malicious payloads, allowing attackers to exploit deserialization flaws in .NET applications. But how does this attack vector actually work, and why does it succeed?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this post, we&amp;rsquo;ll walk through the underlying mechanics, focusing on an example using &lt;code&gt;BinaryFormatter&lt;/code&gt; with a simple &lt;code&gt;Student&lt;/code&gt; class. We&amp;rsquo;ll see how a seemingly innocuous application can be vulnerable to severe attacks.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
